https://roadmap.sh/projects/todo-list-api

مهام مشروع جانغو
تم تخصيص شهر له، بمعدل 3-5 يام بلاسبوع و 3 ساعات 
بما أنك خصصت وقتًا ممتازًا (3–5 أيام × 3 ساعات يوميًا)، فهذا يتيح لك تنفيذ المشروع بشكل مرتب وبدون ضغط.

---

## ✅ خطة المشروع الكاملة (مقسّمة لمهام واضحة + جدول زمني مرن):

### 🗓️ **الأسبوع 1: التحضير والبنية الأساسية**

#### ✅ اليوم 1:
*تنصيب django+evn+DRF
* إنشاء مشروع Django
* إنشاء تطبيق `tasks`
* إعداد بيئة العمل الافتراضية `venv` + Git
* إعداد قاعدة بيانات SQLite مؤقتًا
* إعداد ملفات settings وتهيئة المشروع للـ API

#### ✅ اليوم 2:

* إنشاء نموذج `User` (إذا استخدمت `AbstractUser`) أو استخدام `User` الافتراضي
* إعداد Django REST Framework
* إنشاء نموذج `ToDo` وربطه بالمستخدم
* إنشاء Serializer لـ `ToDo`

#### ✅ اليوم 3:

* إنشاء endpoints CRUD للمهام (Create/Read/Update/Delete)
* تأكيد ارتباط المهام بالمستخدم

---

### 🗓️ **الأسبوع 2: المصادقة والصلاحيات**

#### ✅ اليوم 4:

* إعداد تسجيل مستخدم (User Registration Endpoint)
* إعداد تسجيل دخول (Login) باستخدام JWT (بمكتبة مثل `djangorestframework-simplejwt`)
* اختبار المصادقة عبر Postman

#### ✅ اليوم 5:

* ربط المصادقة بجميع عمليات المهام (يجب أن يكون المستخدم مسجل دخول)
* تقييد تحديث/حذف المهام لتكون من نفس صاحب المهمة فقط
* تجهيز توثيق بسيط عبر Postman أو Swagger

---

### 🗓️ **الأسبوع 3: الميزات الإضافية**

#### ✅ اليوم 6:

* إضافة Pagination في عرض المهام
* إضافة فلترة حسب الحالة (مثلاً: مكتملة، غير مكتملة)

#### ✅ اليوم 7:

* تحسين رسائل الخطأ (401/403/404)
* تجربة حذف وتعديل غير مصرح به وإرجاع الخطأ المناسب

#### ✅ اليوم 8:

* تحسين شكل الاستجابات (Responses)
* مراجعة الأمن الأساسي (مثلاً تعطيل واجهة admin إن لم تكن مستخدمة)

---

### 🗓️ **الأسبوع 4 (اختياري/مكافآت):**

#### ✅ اليوم 9:

* إضافة rate limiting (مثل `throttle_classes` في DRF)
* إضافة refresh token (موجودة ضمن simplejwt)

#### ✅ اليوم 10:

* كتابة اختبارات أساسية (unit tests)

#### ✅ اليوم 11:

* تجهيز README احترافي + رفع المشروع على GitHub

---

## 🧠 أدوات ستستخدمها:

| الجزء     | الأدوات                                   |
| --------- | ----------------------------------------- |
| Framework | Django + Django REST Framework            |
| Auth      | simplejwt أو custom token logic           |
| Database  | SQLite (أو PostgreSQL لو أحببت لاحقًا)    |
| Testing   | Postman / Curl / DRF test client          |
| نشر       | GitHub (لاحقًا Heroku أو Render إن أحببت) |

---



أكيد يا صديقي، خليني أترجم لك وصف المشروع كامل بشكل واضح وبسيط، وبعدين بأكد لك إذا خطواتنا وخطة المهام اللي عم نمشي عليها متوافقة تمامًا مع المتطلبات. جاهز؟ يلا نبلّش:

---

## 🇬🇧 **وصف المشروع الأصلي (بالإنجليزية):**

> بناء RESTful API لإدارة قائمة المهام (To-Do List) مع تنفيذ المصادقة للمستخدمين، وليس فقط عمليات CRUD كالمشاريع السابقة.

---

## 🇸🇾 **الترجمة الواضحة:**

### 🎯 **أهداف المشروع:**

في هذا المشروع، ستقوم ببناء واجهة برمجية (API) تسمح للمستخدمين بإدارة قائمة المهام الخاصة بهم (To-Do List).
على عكس المشاريع السابقة التي كانت تركّز فقط على **عمليات CRUD** (إنشاء، قراءة، تعديل، حذف)، هذا المشروع سيتطلب منك:

* تنفيذ **المصادقة (Authentication)** للمستخدمين
* تصميم **النماذج (Schema)** وقاعدة البيانات
* تصميم API بأسلوب RESTful
* التعامل مع الأخطاء والحماية
* إضافة **التحقق من صحة البيانات (Validation)**
* دعم **الترقيم (Pagination)** و**الفلترة (Filtering)**

---

## ✅ **المتطلبات الأساسية:**

1. تسجيل مستخدم جديد

   * التحقق من فريدة البريد الإلكتروني
   * تشفير كلمة المرور
   * توليد Token عند نجاح التسجيل (JWT أو غيره)

2. تسجيل الدخول

   * التحقق من البريد وكلمة المرور
   * توليد وإرجاع Token عند نجاح المصادقة

3. CRUD للمهام:

   * إنشاء مهمة (مع إرسال الـ token في Header)
   * تحديث مهمة (يجب أن يكون المستخدم هو مالك المهمة)
   * حذف مهمة (نفس الشيء: فقط من أنشأ المهمة يستطيع حذفها)
   * عرض المهام (تكون **مرتبطة بالمستخدم**، **مقسّمة صفحات**، ويمكن **فلترتها**)

4. الحماية:

   * الرد بخطأ 401 إن لم يكن المستخدم مصادقًا
   * الرد بخطأ 403 إن حاول تعديل/حذف مهمة لا يملكها

---

## 🎁 **المكافآت (Bonus):**

* فلترة وفرز المهام
* اختبارات وحدات (Unit Tests)
* تحديد معدل الطلبات (Rate Limiting)
* دعم **Refresh Token** للمصادقة

---

## ✅ **التحقق من خطة العمل اللي عم نشتغل عليها حالياً:**

| العنصر                                | هل موجود بخطتنا؟           | ملاحظات         |
| ------------------------------------- | -------------------------- | --------------- |
| إعداد المشروع وتهيئة البيئة           | ✅                          | أنجزناه بالكامل |
| إنشاء نموذج `ToDo` وربطه بالمستخدم    | 🔄 جاري العمل عليه الآن    |                 |
| إعداد Django REST Framework           | ✅ مخطط له في اليوم الثاني  |                 |
| إعداد تسجيل مستخدم                    | ✅ ضمن خطة اليوم الرابع     |                 |
| تسجيل الدخول باستخدام JWT             | ✅ اليوم الرابع             |                 |
| CRUD للمهام                           | ✅ اليوم الثالث             |                 |
| ربط المهام بالمستخدم فقط              | ✅ اليوم الثالث + الخامس    |                 |
| الحماية (401/403)                     | ✅ اليوم الخامس والسابع     |                 |
| فلترة وترقيم (Pagination & Filtering) | ✅ اليوم السادس             |                 |
| تحسين الرسائل والأخطاء                | ✅ اليوم السابع             |                 |
| تحسين شكل الاستجابات                  | ✅ اليوم الثامن             |                 |
| توثيق بسيط                            | ✅ اليوم الخامس             |                 |
| Refresh Token                         | ✅ يوم إضافي (اليوم التاسع) |                 |
| اختبارات                              | ✅ اليوم العاشر             |                 |
| رفع المشروع + README                  | ✅ اليوم الحادي عشر         |                 |

---

## ✅ **النتيجة:**

نعم! 🎉
**الخطة التي نتبعها حاليًا متوافقة تمامًا مع المتطلبات الأصلية للمشروع المكتوبة بالإنجليزية.**

بل أكثر من ذلك:

* مقسّمة بشكل منطقي (أسبوعيًا ويوميًا)
* فيها مراعاة للمراحل الواقعية لبناء API حقيقي
* فيها اختياري للمكافآت والميزات الإضافية حسب الوقت والطاقة

---

إذا بتحب، منرجع نكمّل اليوم مع **نموذج `ToDo`**، أو منوقف لهون حسب طاقتك.

أنا معك دائمًا خطوة بخطوة ❤️
